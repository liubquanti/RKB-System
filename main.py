import logging
import re
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters
import requests
from datetime import datetime
from config import TOKEN, CHANNEL_ID, GROUP_ID
from tags import tags  # –Ü–º–ø–æ—Ä—Ç —Ç–µ–≥—ñ–≤ –∑ —Ñ–∞–π–ª—É tags.py
from banned import banned_tags
import random
import time

# –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
def is_image_accessible(url):
    try:
        response = requests.head(url)
        return response.status_code == 200
    except requests.RequestException:
        return False

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ Danbooru –∑ –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤—Å—ñ—Ö —Ç–µ–≥—ñ–≤
def get_random_image():
    all_tags = ' '.join(tags)  # –û–±'—î–¥–Ω–∞—Ç–∏ –≤—Å—ñ —Ç–µ–≥–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥–æ–∫
    url = f"https://danbooru.donmai.us/posts.json?tags={all_tags}&random=true"
    
    for _ in range(10):  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–ø—Ä–æ–± –∑–Ω–∞–π—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–µ–∑ –∑–∞–±–∞–Ω–µ–Ω–∏—Ö —Ç–µ–≥—ñ–≤
        response = requests.get(url)
        data = response.json()
        
        if isinstance(data, list) and data:
            random.shuffle(data)  # –ü–µ—Ä–µ–º—ñ—à–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –≤–∏–ø–∞–¥–∫–æ–≤–æ—Å—Ç—ñ
            
            for image_data in data:
                image_url = image_data.get('file_url')
                tag_string = image_data.get('tag_string', '')

                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–≥ –∑–∞–±–∞–Ω–µ–Ω—ñ —Ç–µ–≥–∏
                if any(banned_tag in tag_string for banned_tag in banned_tags):
                    continue

                if is_image_accessible(image_url):
                    published_at = image_data.get('created_at')
                    tag_string_character = image_data.get('tag_string_character', '')
                    characters = tag_string_character.replace(' ', ', ')
                    copyright_info = image_data.get('tag_string_copyright', '')
                    rating = image_data.get('rating', '')
                    tag_string_general = image_data.get('tag_string_general', '')
                    post_id = image_data.get('id')
                    artist = image_data.get('tag_string_artist', '')
                    return image_url, published_at, characters, copyright_info, rating, tag_string_general, post_id, artist

    return None, None, None, None, None, None, None, None

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —ñ–º–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤
def clean_character_name(name):
    return re.sub(r'_?\([^)]*\)', '', name)

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É tags.py
def update_tags_file():
    with open("tags.py", "w") as file:
        file.write("tags = [\n")
        for tag in tags:
            file.write(f'    "{tag}",\n')
        file.write("]\n")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É banned.py
def update_banned_tags_file():
    with open('banned.py', 'w') as file:
        file.write('banned_tags = [\n')
        for tag in banned_tags:
            file.write(f'    "{tag}",\n')
        file.write(']\n')

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–í—ñ—Ç–∞—é! –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /get_image –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.\n'
                                    '–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_tag <tag>.\n'
                                    '–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /remove_tag <tag>.\n'
                                    '–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö —Ç–µ–≥—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /list_tags.')

# –ö–æ–º–∞–Ω–¥–∞ /get_image
async def get_image(update: Update, context: CallbackContext) -> None:
    image_url, published_at, characters, copyright_info, rating, tag_string_general, post_id, artist = get_random_image()
    if image_url:
        keyboard = [
            [InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data='confirm')],
            [InlineKeyboardButton("–í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data='reject')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        cleaned_characters = {clean_character_name(char) for char in characters.split(', ')}
        character_hashtags = ' '.join(f"#{char}" for char in cleaned_characters)
        
        cleaned_copyrights = {clean_character_name(copyright) for copyright in copyright_info.split(' ')}
        copyright_hashtags = ' '.join(f"#{copyright}" for copyright in cleaned_copyrights)

        if rating == 'g':
            rating = 'üü¢¬† ‚Ä¢¬† #general'
        elif rating == 's':
            rating = 'üü°¬† ‚Ä¢¬† #sensetive'
        elif rating == 'q':
            rating = 'üü†¬† ‚Ä¢¬† #questionable'
        elif rating == 'e':
            rating = 'üî¥¬† ‚Ä¢¬† #explicit'
        
        hashtags = character_hashtags + '\n–ö–æ–ø: ' + copyright_hashtags
        channel_hashtags = 'üé≠¬† ‚Ä¢¬† ' + character_hashtags + '\n' + 'üåê¬† ‚Ä¢¬† ' + copyright_hashtags + '\n' + rating + '\nü™∂¬† ‚Ä¢¬† #' + artist
        
        post_url = f"https://danbooru.donmai.us/posts/{post_id}"

        re.sub(r'_?\([^)]*\)', '', artist)

        caption = (
            f"–ß–∞—Å: {datetime.fromisoformat(published_at).strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"–ê—Ä—Ç: #{artist}\n"
            f"–ü–µ—Ä—Å: {hashtags if hashtags else '–ù–µ–º–∞—î —Ç–µ–≥—ñ–≤'}\n"
            f"–†–µ–π—Ç: {rating}\n"
            f"{post_url}"
            
        )
        channel_caption = (
            f"{channel_hashtags if channel_hashtags else '–ù–µ–º–∞—î —Ç–µ–≥—ñ–≤'}"
        )
        channel_caption = (
            f"{channel_hashtags if channel_hashtags else '–ù–µ–º–∞—î —Ç–µ–≥—ñ–≤'}"
        )
        
        context.user_data['current_image'] = image_url
        context.user_data['current_caption'] = caption
        context.user_data['current_channel_caption'] = channel_caption
        await update.message.reply_photo(photo=image_url, caption=caption, reply_markup=reply_markup)
    else:
        await update.message.reply_text('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    if query.data == 'confirm':
        image_url = context.user_data.get('current_image')
        caption = context.user_data.get('current_caption')
        channel_caption = context.user_data.get('current_channel_caption')
        if image_url:
            try:
                await context.bot.send_photo(chat_id=CHANNEL_ID, photo=image_url, caption=channel_caption)
                try:
                    keyboard = [
                        [InlineKeyboardButton(f"–û–ø—É–±–ª—ñ–∫—É–≤–∞–Ω–æ!", callback_data='reject')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_reply_markup(reply_markup=reply_markup)
                    time.sleep(1)
                    keyboard = [
                        [InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data='confirm')],
                        [InlineKeyboardButton("–í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data='reject')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_reply_markup(reply_markup=reply_markup)
                except Exception as e:
                    logger.error(f"Failed to edit message text: {e}")
            except Exception as e:
                logger.error(f"Failed to send photo: {e}")
                try:
                    await query.edit_message_text(text="–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
                except Exception as e:
                    logger.error(f"Failed to edit message text: {e}")
    elif query.data == 'reject':
        max_retries = 5
        for attempt in range(max_retries):
            image_url, published_at, characters, copyright_info, rating, tag_string_general, post_id, artist = get_random_image()
            if image_url:
                keyboard = [
                    [InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data='confirm')],
                    [InlineKeyboardButton("–í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data='reject')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                cleaned_characters = {clean_character_name(char) for char in characters.split(', ')}
                character_hashtags = ' '.join(f"#{char}" for char in cleaned_characters)
                
                cleaned_copyrights = {clean_character_name(copyright) for copyright in copyright_info.split(' ')}
                copyright_hashtags = ' '.join(f"#{copyright}" for copyright in cleaned_copyrights)

                if rating == 'g':
                    rating = 'üü¢¬† ‚Ä¢¬† #general'
                elif rating == 's':
                    rating = 'üü°¬† ‚Ä¢¬† #sensetive'
                elif rating == 'q':
                    rating = 'üü†¬† ‚Ä¢¬† #questioable'
                elif rating == 'e':
                    rating = 'üî¥¬† ‚Ä¢¬† #explicit'
                
                hashtags = character_hashtags + '\n–ö–æ–ø: ' + copyright_hashtags
                channel_hashtags = 'üé≠¬† ‚Ä¢¬† ' + character_hashtags + '\n' + 'üåê¬† ‚Ä¢¬† ' + copyright_hashtags + '\n' + rating + '\nü™∂¬† ‚Ä¢¬† #' + artist
                
                post_url = f"https://danbooru.donmai.us/posts/{post_id}"

                re.sub(r'_?\([^)]*\)', '', artist)

                caption = (
                    f"–ß–∞—Å: {datetime.fromisoformat(published_at).strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"–ê—Ä—Ç: #{artist}\n"
                    f"–ü–µ—Ä—Å: {hashtags if hashtags else '–ù–µ–º–∞—î —Ç–µ–≥—ñ–≤'}\n"
                    f"–†–µ–π—Ç: {rating}\n"
                    f"{post_url}"
                )
                channel_caption = (
                    f"{channel_hashtags if channel_hashtags else '–ù–µ–º–∞—î —Ç–µ–≥—ñ–≤'}"
                )
                
                context.user_data['current_image'] = image_url
                context.user_data['current_caption'] = caption
                context.user_data['current_channel_caption'] = channel_caption
                try:
                    await query.edit_message_media(media=InputMediaPhoto(image_url, caption=caption), reply_markup=reply_markup)
                    break
                except Exception as e:
                    logger.error(f"Failed to edit message media (attempt {attempt+1}/{max_retries}): {e}")
                    keyboard = [
                        [InlineKeyboardButton(f"–ù–µ–≤–¥–∞—á–∞!\n–ü–æ—á–µ–∫–∞–π—Ç–µ! ({attempt+1}/{max_retries})", callback_data='reject')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    try:
                        await query.edit_message_reply_markup(reply_markup=reply_markup)
                    except Exception as e:
                        logger.error(f"Failed to edit message reply markup (attempt {attempt+1}/{max_retries}): {e}")
                        keyboard = [
                            [InlineKeyboardButton(f"–ù–µ–≤–¥–∞—á–∞!\n–ü–æ—á–µ–∫–∞–π—Ç–µ! ({attempt+1}/{max_retries})", callback_data='reject')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_reply_markup(reply_markup=reply_markup)
                      
                    time.sleep(1)
            else:
                logger.error(f"Failed to get image (attempt {attempt+1}/{max_retries})")
                keyboard = [
                    [InlineKeyboardButton(f"–ù–µ–≤–¥–∞—á–∞!\n–ü–æ—á–µ–∫–∞–π—Ç–µ! ({attempt+1}/{max_retries})", callback_data='reject')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_reply_markup(reply_markup=reply_markup)
                time.sleep(1)
        else:
            try:
                keyboard = [
                    [InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data='confirm')],
                    [InlineKeyboardButton(f"–ü–æ–º–∏–ª–∫–∞\n(—Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑)", callback_data='reject')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_reply_markup(reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"Failed to edit message text: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /add_tag
async def add_tag(update: Update, context: CallbackContext) -> None:
    tag = ' '.join(context.args)
    if tag:
        if tag not in tags:
            tags.append(tag)
            update_tags_file()
            await update.message.reply_text(f'T–µ–≥ "{tag}" —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.')
        else:
            await update.message.reply_text(f'T–µ–≥ "{tag}" –≤–∂–µ —ñ—Å–Ω—É—î.')
    else:
        await update.message.reply_text('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ç–µ–≥ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è.')

# –ö–æ–º–∞–Ω–¥–∞ /remove_tag
async def remove_tag(update: Update, context: CallbackContext) -> None:
    tag = ' '.join(context.args)
    if tag:
        if tag in tags:
            tags.remove(tag)
            update_tags_file()
            await update.message.reply_text(f'T–µ–≥ "{tag}" —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.')
        else:
            await update.message.reply_text(f'T–µ–≥ "{tag}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
    else:
        await update.message.reply_text('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ç–µ–≥ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.')

# –ö–æ–º–∞–Ω–¥–∞ /block_tag
async def block_tag(update: Update, context: CallbackContext) -> None:
    tag = ' '.join(context.args)
    if tag:
        if tag not in banned_tags:
            banned_tags.append(tag)
            update_banned_tags_file()
            await update.message.reply_text(f'T–µ–≥ "{tag}" —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.')
        else:
            await update.message.reply_text(f'T–µ–≥ "{tag}" –≤–∂–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.')
    else:
        await update.message.reply_text('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ç–µ–≥ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è.')

# –ö–æ–º–∞–Ω–¥–∞ /unblock_tag
async def unblock_tag(update: Update, context: CallbackContext) -> None:
    tag = ' '.join(context.args)
    if tag:
        if tag in banned_tags:
            banned_tags.remove(tag)
            update_banned_tags_file()
            await update.message.reply_text(f'T–µ–≥ "{tag}" —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.')
        else:
            await update.message.reply_text(f'T–µ–≥ "{tag}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–µ–¥ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö.')
    else:
        await update.message.reply_text('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ç–µ–≥ –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è.')

# –ö–æ–º–∞–Ω–¥–∞ /list_tags
async def list_tags(update: Update, context: CallbackContext) -> None:
    if tags:
        await update.message.reply_text('–°–ø–∏—Å–æ–∫ —Ç–µ–≥—ñ–≤:\n' + '\n'.join(tags))
    else:
        await update.message.reply_text('–°–ø–∏—Å–æ–∫ —Ç–µ–≥—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.')

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main() -> None:
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start",start))
    application.add_handler(CommandHandler("get_image", get_image))
    application.add_handler(CommandHandler("add_tag", add_tag))
    application.add_handler(CommandHandler("remove_tag", remove_tag))
    application.add_handler(CommandHandler("block_tag", block_tag))
    application.add_handler(CommandHandler("unblock_tag", unblock_tag))
    application.add_handler(CommandHandler("list_tags", list_tags))
    application.add_handler(CallbackQueryHandler(button))

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(error_handler)

    application.run_polling()

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: Update, context: CallbackContext) -> None:
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

if __name__ == '__main__':
    main()